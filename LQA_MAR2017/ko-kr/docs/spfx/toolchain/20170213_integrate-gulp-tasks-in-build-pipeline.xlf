<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="20170213_integrate-gulp-tasks-in-build-pipeline.md" source-language="en-US" target-language="ko-KR" build-num="-2128267627">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <skl>
        <internal-file form="base64"><![CDATA[]]></internal-file>
      </skl>
      <count-group name="BlackBox wordcount">
        <count count-type="x-wordCount">611</count>
        <count count-type="x-adjWordCount">539.25</count>
        <count count-type="x-curAdjWordCount">539.25</count>
        <count count-type="x-repeatAdjWordCount">0</count>
        <count count-type="x-termWordCount">0</count>
      </count-group>
      <count-group name="BlackBox wordcount analysis">
        <count count-type="x-match102%">0</count>
        <count count-type="x-match101%">53</count>
        <count count-type="x-match100%">25</count>
        <count count-type="x-match99-90%">0</count>
        <count count-type="x-match89-75%">0</count>
        <count count-type="repetition">0</count>
      </count-group>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Integrate gulp tasks in SharePoint Framework toolchain</source>
          <target state="final">SharePoint Framework 도구 체인에 gulp 작업 통합</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="7" adjWordcount="7" curWordcount="7"</note></trans-unit>
        <group id="paragraph-101" merged-trans="yes">
          <trans-unit id="p101" translate="yes" xml:space="preserve">
            <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The SharePoint Framework is currently in preview and is subject to change. SharePoint Framework client-side web parts are not currently supported for use in production environments.</source>
            <target state="final" state-qualifier="leveraged-tm"><bpt id="p1">**</bpt>참고:<ept id="p1">**</ept> SharePoint Framework는 현재 미리 보기로 제공되며 변경될 수 있습니다. SharePoint Framework 클라이언트 쪽 웹 파트는 현재 프로덕션 환경에서 사용하도록 지원되지 않습니다.</target><alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="leveraged-tm"><bpt id="p1">**</bpt>참고:<ept id="p1">**</ept> SharePoint Framework는 현재 미리 보기로 제공되며 변경될 수 있습니다. SharePoint Framework 클라이언트 쪽 웹 파트는 현재 프로덕션 환경에서 사용하도록 지원되지 않습니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="101" wordcount="27" adjWordcount="0" curWordcount="0" tmLabel="20161116_NEW_SP_ FRAMEWORK_CONTENT"</note></trans-unit>
          <group id="sentence-101">
            <trans-unit id="102" translate="no" xml:space="preserve">
              <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The SharePoint Framework is currently in preview and is subject to change.</source>
              <target state="final"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The SharePoint Framework is currently in preview and is subject to change.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="13" adjWordcount="13" curWordcount="13"</note></trans-unit>
            <trans-unit id="103" translate="no" xml:space="preserve">
              <source>SharePoint Framework client-side web parts are not currently supported for use in production environments.</source>
              <target state="final">SharePoint Framework client-side web parts are not currently supported for use in production environments.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="14" adjWordcount="14" curWordcount="14"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SharePoint client-side development tools use <bpt id="p1">[</bpt>gulp<ept id="p1">](http://gulpjs.com/)</ept> as the build process task runner to:</source>
          <target state="final">SharePoint 클라이언트 쪽 개발 도구는 빌드 프로세스 작업 실행기로 <bpt id="p1">[</bpt>gulp<ept id="p1">](http://gulpjs.com/)</ept>를 사용하여 다음을 수행합니다.</target>
        <alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="tm-suggestion">SharePoint 클라이언트 쪽 개발 도구는 빌드 프로세스 작업 실행기로 <bpt id="p1">[</bpt>gulp<ept id="p1">](http://gulpjs.com/)</ept>를 사용하여 다음을 수행합니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="100" wordcount="13" adjWordcount="3.25" curWordcount="3.25" tmLabel="20161116_NEW_SP_ FRAMEWORK_CONTENT"</note></trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Bundle and minify JavaScript and CSS files.</source>
          <target state="final" state-qualifier="leveraged-tm">JavaScript 및 CSS 파일을 번들로 묶고 축소합니다.</target><alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="leveraged-tm">JavaScript 및 CSS 파일을 번들로 묶고 축소합니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="101" wordcount="7" adjWordcount="0" curWordcount="0" tmLabel="20161116_NEW_SP_ FRAMEWORK_CONTENT"</note></trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Run tools to call the bundling and minification tasks before each build.</source>
          <target state="final" state-qualifier="leveraged-tm">각 빌드 전에 번들화 및 축소 작업을 호출하는 도구를 실행합니다.</target><alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="leveraged-tm">각 빌드 전에 번들화 및 축소 작업을 호출하는 도구를 실행합니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="101" wordcount="12" adjWordcount="0" curWordcount="0" tmLabel="20161116_NEW_SP_ FRAMEWORK_CONTENT"</note></trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compile LESS or SASS files to CSS.</source>
          <target state="final" state-qualifier="leveraged-tm">ESS 또는 SASS 파일을 CSS로 컴파일합니다.</target><alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="leveraged-tm">ESS 또는 SASS 파일을 CSS로 컴파일합니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="101" wordcount="7" adjWordcount="0" curWordcount="0" tmLabel="20161116_NEW_SP_ FRAMEWORK_CONTENT"</note></trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compile TypeScript files to JavaScript.</source>
          <target state="final">TypeScript 파일을 JavaScript로 컴파일합니다.</target>
        <alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="tm-suggestion">TypeScript 파일을 JavaScript로 컴파일합니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="100" wordcount="5" adjWordcount="1.25" curWordcount="1.25" tmLabel="20161116_NEW_SP_ FRAMEWORK_CONTENT"</note></trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One common task you would want to add to the SharePoint Framework toolchain is to integrate your custom gulp tasks in the build pipeline.</source>
          <target state="final">SharePoint Framework 도구 체인에 추가하려는 일반적인 작업은 빌드 파이프라인에 사용자 지정 gulp 작업을 통합하는 것입니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="24" adjWordcount="24" curWordcount="24"</note></trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gulp tasks</source>
          <target state="final">Gulp 작업</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="2" adjWordcount="2" curWordcount="2"</note></trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Normally gulp tasks are defined in the <ph id="ph1">`gulpfile.js`</ph> as:</source>
          <target state="final">일반적으로 Gulp 작업은 <ph id="ph1">`gulpfile.js`</ph>에 다음과 같이 정의됩니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="8" adjWordcount="8" curWordcount="8"</note></trans-unit>
        <group id="paragraph-102" merged-trans="yes">
          <trans-unit id="p102" translate="yes" xml:space="preserve">
            <source>When working with the SharePoint Framework toolchain, it is necessary to define your tasks in the framework's build pipeline. Once defined and registered with the pipeline, the task will be added to the toolchain.</source>
            <target state="final">SharePoint Framework 도구 체인으로 작업할 때 프레임워크의 빌드 파이프라인에서 작업을 정의해야 합니다. 작업은 정의되고 파이프라인에 등록된 후에 도구 체인에 추가됩니다.</target>
          <note from="bb-metadata"> wordcount="34" adjWordcount="34" curWordcount="34"</note></trans-unit>
          <group id="sentence-102">
            <trans-unit id="112" translate="no" xml:space="preserve">
              <source>When working with the SharePoint Framework toolchain, it is necessary to define your tasks in the framework's build pipeline.</source>
              <target state="final">When working with the SharePoint Framework toolchain, it is necessary to define your tasks in the framework's build pipeline.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="19" adjWordcount="19" curWordcount="19"</note></trans-unit>
            <trans-unit id="113" translate="no" xml:space="preserve">
              <source>Once defined and registered with the pipeline, the task will be added to the toolchain.</source>
              <target state="final">Once defined and registered with the pipeline, the task will be added to the toolchain.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="15" adjWordcount="15" curWordcount="15"</note></trans-unit>
          </group>
        </group>
        <group id="paragraph-103" merged-trans="yes">
          <trans-unit id="p103" translate="yes" xml:space="preserve">
            <source>SharePoint Framework uses a <bpt id="p1">[</bpt>common build toolchain<ept id="p1">](sharepoint-framework-toolchain.md#common-build-tools-packages)</ept> which consists of a set of npm packages that share common build tasks. And hence, the default tasks are defined in the common package as opposed to your client-side project's <ph id="ph1">`gulpfile.js`</ph>. To see the available tasks, you can execute the following command in a console within your project directory:</source>
            <target state="final">SharePoint Framework는 일반적인 빌드 작업을 공유하는 npm 패키지 집합으로 구성되는 <bpt id="p1">[</bpt>공용 빌드 도구 체인<ept id="p1">](sharepoint-framework-toolchain.md#common-build-tools-packages)</ept>을 사용합니다. 따라서 기본 작업은 클라이언트 쪽 프로젝트의 <ph id="ph1">`gulpfile.js`</ph>와 달리 일반적인 패키지에 정의됩니다. 사용할 수 있는 작업을 보려면 프로젝트 디렉터리 내의 콘솔에서 다음 명령을 실행할 수 있습니다.</target>
          <note from="bb-metadata"> wordcount="55" adjWordcount="55" curWordcount="55"</note></trans-unit>
          <group id="sentence-103">
            <trans-unit id="114" translate="no" xml:space="preserve">
              <source>SharePoint Framework uses a <bpt id="p1">[</bpt>common build toolchain<ept id="p1">](sharepoint-framework-toolchain.md#common-build-tools-packages)</ept> which consists of a set of npm packages that share common build tasks.</source>
              <target state="final">SharePoint Framework uses a <bpt id="p1">[</bpt>common build toolchain<ept id="p1">](sharepoint-framework-toolchain.md#common-build-tools-packages)</ept> which consists of a set of npm packages that share common build tasks.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="20" adjWordcount="20" curWordcount="20"</note></trans-unit>
            <trans-unit id="115" translate="no" xml:space="preserve">
              <source>And hence, the default tasks are defined in the common package as opposed to your client-side project's <ph id="ph1">`gulpfile.js`</ph>.</source>
              <target state="final">And hence, the default tasks are defined in the common package as opposed to your client-side project's <ph id="ph1">`gulpfile.js`</ph>.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="17" adjWordcount="17" curWordcount="17"</note></trans-unit>
            <trans-unit id="116" translate="no" xml:space="preserve">
              <source>To see the available tasks, you can execute the following command in a console within your project directory:</source>
              <target state="final">To see the available tasks, you can execute the following command in a console within your project directory:</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="18" adjWordcount="18" curWordcount="18"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The command above will list all the available tasks.</source>
          <target state="final">위의 명령을 실행하면 사용 가능한 모든 작업이 표시됩니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="9" adjWordcount="9" curWordcount="9"</note></trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Available gulp tasks</source>
          <target state="final">사용할 수 있는 gulp 작업</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="3" adjWordcount="3" curWordcount="3"</note></trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Custom gulp tasks</source>
          <target state="final">사용자 지정 gulp 작업</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="3" adjWordcount="3" curWordcount="3"</note></trans-unit>
        <group id="paragraph-104" merged-trans="yes">
          <trans-unit id="p104" translate="yes" xml:space="preserve">
            <source>To add your custom tasks, you will define the custom tasks in the <ph id="ph1">`gulpfile.js`</ph>. Open the <ph id="ph2">`gulpfile.js`</ph> in your code editor. The default code initializes the SharePoint Framework toolchain and the global <ph id="ph3">`gulp`</ph> instance for the toolchain. Any custom tasks added should be defined before initializing the global <ph id="ph4">`gulp`</ph> instance.</source>
            <target state="final">사용자 지정 작업을 추가하려면 <ph id="ph1">`gulpfile.js`</ph>에서 사용자 지정 작업을 정의합니다. 코드 편집기에서 <ph id="ph2">`gulpfile.js`</ph>를 엽니다. 기본 코드는 SharePoint Framework 도구 체인 및 해당 도구 체인에 대한 전역 <ph id="ph3">`gulp`</ph> 인스턴스를 초기화합니다. 추가된 모든 사용자 지정 작업은 전역 <ph id="ph4">`gulp`</ph> 인스턴스를 초기화하기 전에 정의해야 합니다.</target>
          <note from="bb-metadata"> wordcount="46" adjWordcount="46" curWordcount="46"</note></trans-unit>
          <group id="sentence-104">
            <trans-unit id="120" translate="no" xml:space="preserve">
              <source>To add your custom tasks, you will define the custom tasks in the <ph id="ph1">`gulpfile.js`</ph>.</source>
              <target state="final">To add your custom tasks, you will define the custom tasks in the <ph id="ph1">`gulpfile.js`</ph>.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="13" adjWordcount="13" curWordcount="13"</note></trans-unit>
            <trans-unit id="121" translate="no" xml:space="preserve">
              <source>Open the <ph id="ph1">`gulpfile.js`</ph> in your code editor.</source>
              <target state="final">Open the <ph id="ph1">`gulpfile.js`</ph> in your code editor.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="6" adjWordcount="6" curWordcount="6"</note></trans-unit>
            <trans-unit id="122" translate="no" xml:space="preserve">
              <source>The default code initializes the SharePoint Framework toolchain and the global <ph id="ph1">`gulp`</ph> instance for the toolchain.</source>
              <target state="final">The default code initializes the SharePoint Framework toolchain and the global <ph id="ph1">`gulp`</ph> instance for the toolchain.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="15" adjWordcount="15" curWordcount="15"</note></trans-unit>
            <trans-unit id="123" translate="no" xml:space="preserve">
              <source>Any custom tasks added should be defined before initializing the global <ph id="ph1">`gulp`</ph> instance.</source>
              <target state="final">Any custom tasks added should be defined before initializing the global <ph id="ph1">`gulp`</ph> instance.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="12" adjWordcount="12" curWordcount="12"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add your custom task</source>
          <target state="final">사용자 지정 작업 추가</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="4" adjWordcount="4" curWordcount="4"</note></trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To add your custom gulp task, you will add a new sub task to the SharePoint Framework build pipeline using the <bpt id="p1">[</bpt><ph id="ph1">`build.subTask`</ph><ept id="p1">](https://github.com/Microsoft/gulp-core-build#defining-a-custom-task)</ept> function:</source>
          <target state="final">사용자 지정 gulp 작업을 추가하려면 <bpt id="p1">[</bpt><ph id="ph1">`build.subTask`</ph><ept id="p1">](https://github.com/Microsoft/gulp-core-build#defining-a-custom-task)</ept> 함수를 사용하여 SharePoint Framework 빌드 파이프라인에 새 하위 작업을 추가합니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="22" adjWordcount="22" curWordcount="22"</note></trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the case of a stream, you will return the stream:</source>
          <target state="final">스트림의 경우 스트림을 반환합니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="11" adjWordcount="11" curWordcount="11"</note></trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Register your task with gulp command line</source>
          <target state="final">gulp 명령줄에 작업 등록</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="7" adjWordcount="7" curWordcount="7"</note></trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once the custom task is defined, you can then register this custom task with the gulp command line using the <ph id="ph1">`build.task`</ph> function:</source>
          <target state="final">사용자 지정 작업이 정의된 후에는 <ph id="ph1">`build.task`</ph> 함수를 사용하여 이 사용자 지정 작업을 gulp 명령줄에 등록할 수 있습니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="21" adjWordcount="21" curWordcount="21"</note></trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note: Any custom tasks added should be defined before initializing the global <ph id="ph1">`gulp`</ph> instance, that is before the following line of code: <ph id="ph2">`build.initialize(gulp);`</ph></source>
          <target state="final">참고: 추가된 모든 사용자 지정 작업은 전역 <ph id="ph1">`gulp`</ph> 인스턴스를 초기화하기 전에 <ph id="ph2">`build.initialize(gulp);`</ph> 코드 줄 앞에 정의해야 합니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="21" adjWordcount="21" curWordcount="21"</note></trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Now you can execute your custom command in the command line as follows:</source>
          <target state="final">이제 다음과 같이 명령줄에서 사용자 지정 명령을 실행할 수 있습니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="13" adjWordcount="13" curWordcount="13"</note></trans-unit>
        <group id="paragraph-105" merged-trans="yes">
          <trans-unit id="p105" translate="yes" xml:space="preserve">
            <source>Note: You cannot execute the sub task registered using the <ph id="ph1">`build.subTask`</ph> function directly from the command line. You can only execute the task registered using the <ph id="ph2">`build.task`</ph> function.</source>
            <target state="final">참고: 명령줄에서 직접 <ph id="ph1">`build.subTask`</ph> 함수를 사용하여 등록된 하위 작업을 실행할 수는 없습니다. <ph id="ph2">`build.task`</ph> 함수를 사용해야만 등록된 작업을 실행할 수 있습니다.</target>
          <note from="bb-metadata"> wordcount="26" adjWordcount="26" curWordcount="26"</note></trans-unit>
          <group id="sentence-105">
            <trans-unit id="131" translate="no" xml:space="preserve">
              <source>Note: You cannot execute the sub task registered using the <ph id="ph1">`build.subTask`</ph> function directly from the command line.</source>
              <target state="final">Note: You cannot execute the sub task registered using the <ph id="ph1">`build.subTask`</ph> function directly from the command line.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="16" adjWordcount="16" curWordcount="16"</note></trans-unit>
            <trans-unit id="132" translate="no" xml:space="preserve">
              <source>You can only execute the task registered using the <ph id="ph1">`build.task`</ph> function.</source>
              <target state="final">You can only execute the task registered using the <ph id="ph1">`build.task`</ph> function.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="10" adjWordcount="10" curWordcount="10"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Execute your custom task before or after available tasks</source>
          <target state="final">사용 가능한 작업 전후에 사용자 지정 작업 실행</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="9" adjWordcount="9" curWordcount="9"</note></trans-unit>
        <group id="paragraph-106" merged-trans="yes">
          <trans-unit id="p106" translate="yes" xml:space="preserve">
            <source>You can also add this custom task to be executed before or after certain available gulp tasks. The following gulp tasks allow you to inject your custom task before or after task:</source>
            <target state="final">또한 사용할 수 있는 특정 gulp 작업 전후에 실행되도록 사용자 지정 작업을 추가할 수도 있습니다. 다음 gulp 작업을 사용하여 작업 전후에 사용자 지정 작업 삽입할 수 있습니다.</target>
          <note from="bb-metadata"> wordcount="32" adjWordcount="32" curWordcount="32"</note></trans-unit>
          <group id="sentence-106">
            <trans-unit id="134" translate="no" xml:space="preserve">
              <source>You can also add this custom task to be executed before or after certain available gulp tasks.</source>
              <target state="final">You can also add this custom task to be executed before or after certain available gulp tasks.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="17" adjWordcount="17" curWordcount="17"</note></trans-unit>
            <trans-unit id="135" translate="no" xml:space="preserve">
              <source>The following gulp tasks allow you to inject your custom task before or after task:</source>
              <target state="final">The following gulp tasks allow you to inject your custom task before or after task:</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="15" adjWordcount="15" curWordcount="15"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Generic build task (that consists all the available tasks)</source>
          <target state="final">일반적인 빌드 작업(사용 가능한 모든 작업으로 구성)</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="9" adjWordcount="9" curWordcount="9"</note></trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>TypeScript task</source>
          <target state="final">TypeScript 작업</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="2" adjWordcount="2" curWordcount="2"</note></trans-unit>
        <group id="paragraph-107" merged-trans="yes">
          <trans-unit id="p107" translate="yes" xml:space="preserve">
            <source>The SharePoint Framework tasks are available in the default build rig. The build rig is a collection of tasks defined for a specific purpose. In our case, building client-side packages. You can access this default rig using the <ph id="ph1">`build.rig`</ph> object and get access to the pre and post task functions:</source>
            <target state="final">SharePoint Framework 작업은 기본 빌드 Rig에서 사용할 수 있습니다. 빌드 Rig는 특정 용도로 정의된 작업의 컬렉션입니다. 이 경우에는 클라이언트 쪽 패키지 빌드가 작업의 용도입니다. <ph id="ph1">`build.rig`</ph> 개체를 사용하여 이 기본 Rig에 액세스하고 사전 및 사후 작업 함수에 대한 액세스 권한을 얻을 수 있습니다.</target>
          <note from="bb-metadata"> wordcount="49" adjWordcount="49" curWordcount="49"</note></trans-unit>
          <group id="sentence-107">
            <trans-unit id="138" translate="no" xml:space="preserve">
              <source>The SharePoint Framework tasks are available in the default build rig.</source>
              <target state="final">The SharePoint Framework tasks are available in the default build rig.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="11" adjWordcount="11" curWordcount="11"</note></trans-unit>
            <trans-unit id="139" translate="no" xml:space="preserve">
              <source>The build rig is a collection of tasks defined for a specific purpose.</source>
              <target state="final">The build rig is a collection of tasks defined for a specific purpose.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="13" adjWordcount="13" curWordcount="13"</note></trans-unit>
            <trans-unit id="140" translate="no" xml:space="preserve">
              <source>In our case, building client-side packages.</source>
              <target state="final">In our case, building client-side packages.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="6" adjWordcount="6" curWordcount="6"</note></trans-unit>
            <trans-unit id="141" translate="no" xml:space="preserve">
              <source>You can access this default rig using the <ph id="ph1">`build.rig`</ph> object and get access to the pre and post task functions:</source>
              <target state="final">You can access this default rig using the <ph id="ph1">`build.rig`</ph> object and get access to the pre and post task functions:</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="19" adjWordcount="19" curWordcount="19"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example: Custom image resize task</source>
          <target state="final">예제: 사용자 지정 이미지 크기 조정 작업</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="5" adjWordcount="5" curWordcount="5"</note></trans-unit>
        <group id="paragraph-108" merged-trans="yes">
          <trans-unit id="p108" translate="yes" xml:space="preserve">
            <source>As an example, let's use the <bpt id="p1">[</bpt>image resize gulp task<ept id="p1">](https://www.npmjs.com/package/gulp-image-resize)</ept>.  It's a simple task that allows you to resize images.</source>
            <target state="final">예를 들어 <bpt id="p1">[</bpt>이미지 크기 조정 gulp 작업<ept id="p1">](https://www.npmjs.com/package/gulp-image-resize)</ept>을 사용해 보겠습니다.  이 작업은 이미지 크기를 조정할 수 있는 간단한 작업입니다.</target>
          <note from="bb-metadata"> wordcount="20" adjWordcount="20" curWordcount="20"</note></trans-unit>
          <group id="sentence-108">
            <trans-unit id="143" translate="no" xml:space="preserve">
              <source>As an example, let's use the <bpt id="p1">[</bpt>image resize gulp task<ept id="p1">](https://www.npmjs.com/package/gulp-image-resize)</ept>.</source>
              <target state="final">As an example, let's use the <bpt id="p1">[</bpt>image resize gulp task<ept id="p1">](https://www.npmjs.com/package/gulp-image-resize)</ept>.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="10" adjWordcount="10" curWordcount="10"</note></trans-unit>
            <trans-unit id="144" translate="no" xml:space="preserve">
              <source>It's a simple task that allows you to resize images.</source>
              <target state="final">It's a simple task that allows you to resize images.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="10" adjWordcount="10" curWordcount="10"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can download the completed sample <bpt id="p1">[</bpt>here<ept id="p1">](https://aka.ms/spfx-extend-gulp-sample)</ept>.</source>
          <target state="final">전체 샘플은 <bpt id="p1">[</bpt>여기<ept id="p1">](https://aka.ms/spfx-extend-gulp-sample)</ept>에서 다운로드할 수 있습니다.</target>
        <alt-trans match-quality="100%" tool="BlackBox/MSR MT"><target state-qualifier="tm-suggestion">전체 샘플은 <bpt id="p1">[</bpt>여기<ept id="p1">](https://aka.ms/spfx-extend-gulp-sample)</ept>에서 다운로드할 수 있습니다.</target></alt-trans><note from="bb-metadata">fuzzyMatch="100" wordcount="7" adjWordcount="1.75" curWordcount="1.75" tmLabel="20170130_SP_FRAMEWORK"</note></trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>image resize task's documentation<ept id="p1">](https://www.npmjs.com/package/gulp-image-resize#example)</ept>, it shows how to use this custom task:</source>
          <target state="final"><bpt id="p1">[</bpt>이미지 크기 조정 작업 설명서<ept id="p1">](https://www.npmjs.com/package/gulp-image-resize#example)</ept>에는 이 사용자 지정 작업을 사용하는 방법이 나와 있습니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="14" adjWordcount="14" curWordcount="14"</note></trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>We will use this information to add this task in our project using the <ph id="ph1">`build.subTask`</ph> and <ph id="ph2">`build.task`</ph> functions:</source>
          <target state="final">이 정보는 <ph id="ph1">`build.subTask`</ph> 및 <ph id="ph2">`build.task`</ph> 함수를 사용하여 프로젝트에 이 작업을 추가하는 데 사용됩니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="16" adjWordcount="16" curWordcount="16"</note></trans-unit>
        <group id="paragraph-109" merged-trans="yes">
          <trans-unit id="p109" translate="yes" xml:space="preserve">
            <source>Since we are defining the stream, we return the stream in the <ph id="ph1">`build.subTask`</ph> function to the build pipeline. The build pipeline will then asynchronously execute this gulp stream.</source>
            <target state="final">스트림을 정의해야 하므로 <ph id="ph1">`build.subTask`</ph> 함수의 스트림을 빌드 파이프라인으로 반환합니다. 그러면 빌드 파이프라인은 이 gulp 스트림을 비동기적으로 실행합니다.</target>
          <note from="bb-metadata"> wordcount="27" adjWordcount="27" curWordcount="27"</note></trans-unit>
          <group id="sentence-109">
            <trans-unit id="148" translate="no" xml:space="preserve">
              <source>Since we are defining the stream, we return the stream in the <ph id="ph1">`build.subTask`</ph> function to the build pipeline.</source>
              <target state="final">Since we are defining the stream, we return the stream in the <ph id="ph1">`build.subTask`</ph> function to the build pipeline.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="17" adjWordcount="17" curWordcount="17"</note></trans-unit>
            <trans-unit id="149" translate="no" xml:space="preserve">
              <source>The build pipeline will then asynchronously execute this gulp stream.</source>
              <target state="final">The build pipeline will then asynchronously execute this gulp stream.</target>
            <note from="bb-metadata">fuzzyMatch="0" wordcount="10" adjWordcount="10" curWordcount="10"</note></trans-unit>
          </group>
        </group>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Now, you can execute this task from the gulp command line as follows:</source>
          <target state="final">이제 다음과 같이 gulp 명령줄에서 이 작업을 실행할 수 있습니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="13" adjWordcount="13" curWordcount="13"</note></trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>image-resize-task</source>
          <target state="final">image-resize-task</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="1" adjWordcount="1" curWordcount="1"</note></trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You will also see this <ph id="ph1">`resize-images`</ph> task in the available tasks for your project when you execute <ph id="ph2">`gulp --tasks`</ph>:</source>
          <target state="final"><ph id="ph2">`gulp --tasks`</ph>를 실행할 때 프로젝트에 대한 사용 가능한 작업에서 <ph id="ph1">`resize-images`</ph> 작업도 표시됩니다.</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="16" adjWordcount="16" curWordcount="16"</note></trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>image-resize-task with available tasks</source>
          <target state="final">사용 가능한 작업이 있는 image-resize-task</target>
        <note from="bb-metadata">fuzzyMatch="0" wordcount="4" adjWordcount="4" curWordcount="4"</note></trans-unit>
      </group>
    </body>
  </file>
</xliff>